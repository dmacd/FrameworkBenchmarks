
#user  nobody;
worker_processes  auto; # production
#worker_processes  1; # wave config generation

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

error_log stderr error;

#pid        logs/nginx.pid;


events {
    worker_connections  65535;
}


http {
    include       mime.types;
    default_type  application/octet-stream;


    # turn off request logging for performance
    access_log off;

    sendfile        on;
    tcp_nopush     on;


    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    #for win32,  jvm_path maybe is "C:/Program Files/Java/jdk1.7.0_25/jre/bin/server/jvm.dll";
    #for macosx, jvm_path maybe is "/Library/Java/JavaVirtualMachines/1.6.0_65-b14-462.jdk/Contents/Libraries/libserver.dylib";
    #for ubuntu, jvm_path maybe is "/usr/lib/jvm/java-7-oracle/jre/lib/amd64/server/libjvm.so";
    #for centos, jvm_path maybe is "/usr/java/jdk1.6.0_45/jre/lib/amd64/server/libjvm.so";
    #for centos 32bit, jvm_path maybe is "/usr/java/jdk1.7.0_51/jre/lib/i386/server/libjvm.so";

    #jvm_path "/usr/lib/jvm/java-7-oracle/jre/lib/amd64/server/libjvm.so";
    # jvm_path "/Library/Java/JavaVirtualMachines/1.6.0_65-b14-462.jdk/Contents/Libraries/libserver.dylib";

    jvm_path "/usr/lib/jvm/java-7-openjdk-amd64/jre/lib/amd64/server/libjvm.so";
    #for win32, class path seperator is ";",  jvm_options maybe "-Djava.class.path=jars/nginx-clojure-0.2.2.jar;jars/clojure-1.5.1.jar";
    jvm_options "-Djava.class.path=coroutine-udfs:jars/nginx-clojure-0.2.2.jar:jars/clojure-1.5.1.jar:jar:../../handlers/target/uberjar/handlers-standalone.jar";

    #######
    # 'waving config' wtfever that means

    #turn on run tool mode, t means Tool
    #jvm_options "-javaagent:jars/nginx-clojure-0.2.2.jar=tmb"; # tool mode on
    jvm_options "-javaagent:jars/nginx-clojure-0.2.2.jar=mb"; # tool mode off (production)


    jvm_options "-Xbootclasspath/a:jars/nginx-clojure-0.2.2.jar:jars/clojure-1.5.1.jar";

    #Optional The default value is $nginx-workdir/nginx.clojure.wave.CfgToolOutFile
    #Setting Output Path of Waving Configuration File,
    ##jvm_options "-Dnginx.clojure.wave.CfgToolOutFile=/tmp/my-wave-cfg.txt";


    ########

    # enabling coroutines


    #coroutine-udfs is a directory to put your User Defined Class Waving Configuration File
    #for win32, class path seperator is ";", e.g "-Djava.class.path=coroutine-udfs;YOUR_CLASSPATH_HERE"
    #Note: DON NOT put nginx-clojure &  clojure runtime jars here, because they have been appened to the jvm bootclasspath

    #jvm_options "-Djava.class.path=coroutine-udfs:<normal classpath>"; # ???? since i just left it in root wd
    #                               ^^ included in classpath set above

    #copy the waving configuration file generated from previous step to you any classpath dir e.g. coroutine-udfs
    #setting user defined class waving configuration files which are in the above boot classpath, the seperator is ","
    jvm_options "-Dnginx.clojure.wave.udfs=test-wave-config.txt";

    ######



    #jvm heap memory
    jvm_options "-Xms1024m";
    jvm_options "-Xmx1024m";

    #for enable java remote debug uncomment next two lines, make sure "master_process = off;" or "worker_processes = 1;"
    #jvm_options "-Xdebug";
    #jvm_options "-Xrunjdwp:server=y,transport=dt_socket,address=8400,suspend=n";

    #threads number for request handler thread pool on jvm, default is 0.
    #ONLY IF you cann't resolve your performance problem by increasing worker_processes or reducing single request-response time, you can consider the way.
    #jvm_workers 8;

    server {


        # For information on deferred, see:
        # http://nginx.org/en/docs/http/ngx_http_core_module.html#listen
        # http://www.techrepublic.com/article/take-advantage-of-tcp-ip-options-to-optimize-data-transmission/
        # The backlog argument to listen() is set to match net.ipv4.tcp_max_syn_backlog and net.core.somaxconn
        listen       8080 default_server deferred backlog=65535;

        server_name  localhost;

        location / {
            root   html;
            index  index.html index.htm;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

       location /nginx-clojure/json {
          clojure;
          clojure_code '
		(do (require \'handlers.core)
          		(fn [req] (handlers.core/handle-json req))
        		)
          ';
       }


       location /nginx-clojure/db {
          clojure;
          clojure_code '
                (do (require \'handlers.core)
                        (fn [req] (handlers.core/handle-queries req))
                        )
          ';
       }

       location /nginx-clojure/db/ {
          clojure;
          clojure_code '
                (do (require \'handlers.core \'ring.middleware.params)
                        ;(fn [req] (handlers.core/handle-queries req))
                        (ring.middleware.params/wrap-params
                            handlers.core/handle-multiple-queries)
                        )
          ';
       }


       # waving setup
       location /dump {
         clojure;
         clojure_code '
               (do (import \'[nginx.clojure.wave SuspendMethodTracer])
                 (fn[req]
                    (SuspendMethodTracer/dump)
                    {:status 200, :body "ok", :headers {"content-type"  "text/plain"}}
                 ))
          ';

       }


    }

    # clojure handler init

    clojure;
    clojure_code '
		  (do (require \'handlers.core)
          		;(fn [req] (handlers.core/handle-json req))
              (handlers.core/init-server {:db-host "172.31.43.63"})
        		)
          ';



}
